@startuml
class CameraController {
    + CameraController(window:DisplayWindow, focused:Action)
    + UpdateCameraState(context:Context, index:ViewIndex) : void
}
class SwitchableCameraController {
    + SwitchableCameraController(window:DisplayWindow, focused:Action<ViewIndex>)
    + UpdateCameraState(context:Context) : void
    + SwitchUntilNextEndOfDrag() : void
    + SwitchUntilNextWheelEvent() : void
}
enum Direction {
    None= 0,
    Up= 1 << 0,
    Down= 1 << 1,
    Left= 1 << 2,
    Right= 1 << 3,
    Forward= 1 << 4,
    Backward= 1 << 5,
    All= Up | Down | Left | Right | Forward | Backward,
}
struct KeyCombination {
    + shiftOnLastMatch : bool
    + KeyCombination(shortcutCombination:UnityEditor.ShortcutManagement.KeyCombination)
    + Match(evt:IKeyboardEvent, atLeastForModifier:bool) : bool
}
struct TimeHelper {
    + Begin() : void
    + Update() : float
}
Manipulator <|-- CameraController
CameraController <|-- SwitchableCameraController
CameraController +-- Direction
CameraController +-- KeyCombination
CameraController +-- TimeHelper
@enduml
