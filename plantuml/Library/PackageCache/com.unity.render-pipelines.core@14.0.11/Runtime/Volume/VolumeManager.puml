@startuml
class VolumeManager <<sealed>> {
    + CreateStack() : VolumeStack
    + ResetMainStack() : void
    + DestroyStack(stack:VolumeStack) : void
    + Register(volume:Volume, layer:int) : void
    + Unregister(volume:Volume, layer:int) : void
    + IsComponentActiveInMask(layerMask:LayerMask) : bool
    + CheckBaseTypes() : void
    + CheckStack(stack:VolumeStack) : void
    + Update(trigger:Transform, layerMask:LayerMask) : void
    + Update(stack:VolumeStack, trigger:Transform, layerMask:LayerMask) : void
    + GetVolumes(layerMask:LayerMask) : Volume[]
}
struct VolumeIsolationScope {
    + VolumeIsolationScope(unused:bool)
}
class "IEnumerable`1"<T> {
}
VolumeManager --> "instance" VolumeManager
VolumeManager --> "stack" VolumeStack
VolumeManager --> "baseComponentTypes<Type>" "IEnumerable`1"
IDisposable <|-- VolumeIsolationScope
@enduml
