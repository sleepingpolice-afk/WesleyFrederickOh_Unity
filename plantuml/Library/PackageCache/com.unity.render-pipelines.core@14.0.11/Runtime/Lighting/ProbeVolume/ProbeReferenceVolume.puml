@startuml
struct ProbeVolumeSystemParameters {
    + supportsRuntimeDebug : bool
    + supportStreaming : bool
}
struct ProbeVolumeShadingParameters {
    + normalBias : float
    + viewBias : float
    + scaleBiasByMinDistanceBetweenProbes : bool
    + samplingNoise : float
    + weight : float
    + occlusionWeightContribution : float
    + minValidNormalWeight : float
    + frameIndexForNoise : int
    + reflNormalizationLowerClamp : float
    + reflNormalizationUpperClamp : float
}
enum ProbeVolumeTextureMemoryBudget {
    MemoryBudgetLow= 512,
    MemoryBudgetMedium= 1024,
    MemoryBudgetHigh= 2048,
}
enum ProbeVolumeBlendingTextureMemoryBudget {
    None= 0,
    MemoryBudgetLow= 128,
    MemoryBudgetMedium= 256,
    MemoryBudgetHigh= 512,
}
enum ProbeVolumeSHBands {
    SphericalHarmonicsL1= 1,
    SphericalHarmonicsL2= 2,
}
class ProbeReferenceVolume <<partial>> {
    + isInitialized : bool <<get>>
    + numberOfCellsBlendedPerFrame : int <<get>> <<set>>
    + turnoverRate : float <<get>> <<set>>
    + lightingScenario : string <<get>> <<set>>
    + scenarioBlendingFactor : float <<get>> <<set>>
    + BlendLightingScenario(otherScenario:string, blendingFactor:float) : void
    + probeVolumesWeight : float <<get>> <<set>>
    + Initialize(parameters:ProbeVolumeSystemParameters) : void
    + SetEnableStateFromSRP(srpEnablesPV:bool) : void
    + Cleanup() : void
    + GetVideoMemoryCost() : int
    + PerformPendingOperations() : void
    + GetRuntimeResources() : RuntimeResources
    + DataHasBeenLoaded() : bool
    + UpdateConstantBuffer(cmd:CommandBuffer, parameters:ProbeVolumeShadingParameters) : void
}
class Cell {
    + index : int
    + probeCount : int
    + minSubdiv : int
    + maxSubdiv : int
    + indexChunkCount : int
    + shChunkCount : int
    + hasTwoScenarios : bool
}
class CellInfo {
    + flatIdxInCellIndices : int
    + loaded : bool
    + indexUpdated : bool
    + sourceAssetInstanceID : int
    + streamingScore : float
    + referenceCount : int = 0
    + CompareTo(other:CellInfo) : int
    + Clear() : void
}
class BlendingCellInfo {
    + streamingScore : float
    + blendingFactor : float
    + blending : bool
    + CompareTo(other:BlendingCellInfo) : int
    + Clear() : void
    + MarkUpToDate() : void
    + IsUpToDate() : bool
    + ForceReupload() : void
    + ShouldReupload() : bool
    + Prioritize() : void
    + ShouldPrioritize() : bool
}
struct Volume {
    + Volume(trs:Matrix4x4, maxSubdivision:float, minSubdivision:float)
    + Volume(corner:Vector3, X:Vector3, Y:Vector3, Z:Vector3, maxSubdivision:float, minSubdivision:float)
    + Volume(copy:Volume)
    + Volume(bounds:Bounds)
    + CalculateAABB() : Bounds
    + CalculateCenterAndSize(center:Vector3, size:Vector3) : void
    + Transform(trs:Matrix4x4) : void
    + <<override>> ToString() : string
    + Equals(other:Volume) : bool
}
struct RefVolTransform {
    + scale : float
}
struct RuntimeResources {
}
struct ExtraDataActionInput {
}
class "Action`1"<T> {
}
struct InitInfo {
}
class "NativeArray`1"<T> {
}
struct PerScenarioData {
}
class "IComparable`1"<T> {
}
class "List`1"<T> {
}
class "IEquatable`1"<T> {
}
ProbeVolumeSystemParameters --> "memoryBudget" ProbeVolumeTextureMemoryBudget
ProbeVolumeSystemParameters --> "blendingMemoryBudget" ProbeVolumeBlendingTextureMemoryBudget
ProbeVolumeSystemParameters --> "probeDebugMesh" Mesh
ProbeVolumeSystemParameters --> "probeDebugShader" Shader
ProbeVolumeSystemParameters --> "offsetDebugMesh" Mesh
ProbeVolumeSystemParameters --> "offsetDebugShader" Shader
ProbeVolumeSystemParameters --> "scenarioBlendingShader" ComputeShader
ProbeVolumeSystemParameters --> "sceneData" ProbeVolumeSceneData
ProbeVolumeSystemParameters --> "shBands" ProbeVolumeSHBands
ProbeVolumeShadingParameters --> "leakReductionMode" APVLeakReductionMode
ProbeReferenceVolume --> "retrieveExtraDataAction<ExtraDataActionInput>" "Action`1"
ProbeReferenceVolume o-> "checksDuringBakeAction" Action
ProbeReferenceVolume --> "shBands" ProbeVolumeSHBands
ProbeReferenceVolume --> "memoryBudget" ProbeVolumeTextureMemoryBudget
ProbeReferenceVolume --> "instance" ProbeReferenceVolume
ProbeReferenceVolume +-- Cell
Cell --> "position" Vector3Int
Cell --> "shBands" ProbeVolumeSHBands
Cell --> "bricks<Brick>" "NativeArray`1"
Cell --> "validityNeighMaskData<byte>" "NativeArray`1"
Cell --> "probePositions<Vector3>" "NativeArray`1"
Cell --> "touchupVolumeInteraction<float>" "NativeArray`1"
Cell --> "offsetVectors<Vector3>" "NativeArray`1"
Cell --> "validity<float>" "NativeArray`1"
Cell --> "scenario0" PerScenarioData
Cell --> "scenario1" PerScenarioData
Cell --> "bakingScenario" PerScenarioData
ProbeReferenceVolume +-- CellInfo
"IComparable`1" "<CellInfo>" <|-- CellInfo
CellInfo --> "cell" Cell
CellInfo --> "blendingCell" BlendingCellInfo
CellInfo o-> "chunkList<Chunk>" "List`1"
CellInfo --> "debugProbes" CellInstancedDebugProbes
ProbeReferenceVolume +-- BlendingCellInfo
"IComparable`1" "<BlendingCellInfo>" <|-- BlendingCellInfo
BlendingCellInfo --> "cellInfo" CellInfo
BlendingCellInfo o-> "chunkList<Chunk>" "List`1"
ProbeReferenceVolume +-- Volume
"IEquatable`1" "<Volume>" <|-- Volume
ProbeReferenceVolume +-- RefVolTransform
RefVolTransform --> "posWS" Vector3
RefVolTransform --> "rot" Quaternion
ProbeReferenceVolume +-- RuntimeResources
RuntimeResources --> "index" ComputeBuffer
RuntimeResources --> "cellIndices" ComputeBuffer
RuntimeResources --> "L0_L1rx" RenderTexture
RuntimeResources --> "L1_G_ry" RenderTexture
RuntimeResources --> "L1_B_rz" RenderTexture
RuntimeResources --> "L2_0" RenderTexture
RuntimeResources --> "L2_1" RenderTexture
RuntimeResources --> "L2_2" RenderTexture
RuntimeResources --> "L2_3" RenderTexture
RuntimeResources --> "Validity" Texture3D
ProbeReferenceVolume +-- ExtraDataActionInput
ProbeReferenceVolume +-- InitInfo
InitInfo --> "pendingMinCellPosition" Vector3Int
InitInfo --> "pendingMaxCellPosition" Vector3Int
Cell +-- PerScenarioData
PerScenarioData --> "shL0L1RxData<ushort>" "NativeArray`1"
PerScenarioData --> "shL1GL1RyData<byte>" "NativeArray`1"
PerScenarioData --> "shL1BL1RzData<byte>" "NativeArray`1"
PerScenarioData --> "shL2Data_0<byte>" "NativeArray`1"
PerScenarioData --> "shL2Data_1<byte>" "NativeArray`1"
PerScenarioData --> "shL2Data_2<byte>" "NativeArray`1"
PerScenarioData --> "shL2Data_3<byte>" "NativeArray`1"
@enduml
