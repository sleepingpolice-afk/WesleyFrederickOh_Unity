@startuml
class AdditionalLightsShadowCasterPass <<partial>> {
    + AdditionalLightsShadowCasterPass(evt:RenderPassEvent)
    + Dispose() : void
    + Setup(renderingData:RenderingData) : bool
    + <<override>> Configure(cmd:CommandBuffer, cameraTextureDescriptor:RenderTextureDescriptor) : void
    + <<override>> Execute(context:ScriptableRenderContext, renderingData:RenderingData) : void
    + GetShadowLightIndexFromLightIndex(visibleLightIndex:int) : int
}
class AdditionalShadowsConstantBuffer <<static>> {
    + {static} _AdditionalLightsWorldToShadow : int
    + {static} _AdditionalShadowParams : int
    + {static} _AdditionalShadowOffset0 : int
    + {static} _AdditionalShadowOffset1 : int
    + {static} _AdditionalShadowFadeParams : int
    + {static} _AdditionalShadowmapSize : int
}
struct ShadowResolutionRequest {
    + visibleLightIndex : int
    + perLightShadowSliceIndex : int
    + requestedResolution : int
    + softShadow : bool
    + pointLightShadow : bool
    + offsetX : int
    + offsetY : int
    + allocatedResolution : int
    + ShadowResolutionRequest(_visibleLightIndex:int, _perLightShadowSliceIndex:int, _requestedResolution:int, _softShadow:bool, _pointLightShadow:bool)
}
class PassData {
}
ScriptableRenderPass <|-- AdditionalLightsShadowCasterPass
AdditionalLightsShadowCasterPass +-- AdditionalShadowsConstantBuffer
AdditionalLightsShadowCasterPass +-- ShadowResolutionRequest
AdditionalLightsShadowCasterPass +-- PassData
@enduml
