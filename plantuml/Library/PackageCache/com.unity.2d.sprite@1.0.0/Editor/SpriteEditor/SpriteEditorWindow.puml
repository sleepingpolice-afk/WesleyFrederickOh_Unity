@startuml
interface "ISpriteDataProviderFactory`1"<T> {
}
class SpriteEditorAssetPathProviderAttribute {
}
class SpriteObjectProviderAttribute {
}
class SpriteDataProviderFactories {
    + Init() : void
    + GetSpriteEditorDataProviderFromObject(obj:UnityEngine.Object) : ISpriteEditorDataProvider
}
class SpriteEditorWindow {
    + {static} s_OneClickDragStarted : bool = false
    + {static} GetWindow(obj:UnityEngine.Object) : void
    + SpriteEditorWindow()
    + RefreshPropertiesCache() : void
    + InvalidatePropertiesCache() : void
    + textureIsDirty : bool <<get>> <<set>>
    + selectedProviderChanged : bool <<get>>
    + ResetWindow() : void
    + ResetZoomAndScroll() : void
    + <<override>> SaveChanges() : void
    + HandleSpriteSelection() : bool
    + DoTextureReimport(path:string) : void
    + enableMouseMoveEvent : bool <<set>>
    + RequestRepaint() : void
    + SetDataModified() : void
    + editingDisabled : bool <<get>>
    + SetPreviewTexture(texture:UnityTexture2D, width:int, height:int) : void
    + ApplyOrRevertModification(apply:bool) : void
    + GetDataProvider() : T
    + GetMainVisualContainer() : VisualElement
}
class SpriteEditorTexturePostprocessor {
    + <<override>> GetPostprocessOrder() : int
}
class SpriteSelectionChangeEvent {
}
struct SpriteDataProviderFactory {
    + instance : object
}
class SpriteEditorWindowStyles {
    + {static} <<readonly>> styleSheetPath : string = "Packages/com.unity.2d.sprite/Editor/UI/SpriteEditor/SpriteEditor.uss"
}
class CurrentResetContext {
    + assetPath : string
}
class "List`1"<T> {
}
class PreviewTexture2D {
    + PreviewTexture2D(t:UnityTexture2D, width:int, height:int)
    + <<override>> width : int <<get>>
    + <<override>> height : int <<get>>
}
class "EventBase`1"<T> {
}
Attribute <|-- SpriteEditorAssetPathProviderAttribute
Attribute <|-- SpriteObjectProviderAttribute
SpriteUtilityWindow <|-- SpriteEditorWindow
ISpriteEditor <|-- SpriteEditorWindow
SpriteEditorWindow --> "spriteImportMode" SpriteImportMode
SpriteEditorWindow --> "spriteRects<SpriteRect>" "List`1"
SpriteEditorWindow --> "selectedSpriteRect" SpriteRect
SpriteEditorWindow --> "spriteEditorDataProvider" ISpriteEditorDataProvider
SpriteEditorWindow --> "windowDimension" Rect
SpriteEditorWindow --> "previewTexture" ITexture2D
AssetPostprocessor <|-- SpriteEditorTexturePostprocessor
"EventBase`1" "<SpriteSelectionChangeEvent>" <|-- SpriteSelectionChangeEvent
SpriteDataProviderFactories +-- SpriteDataProviderFactory
SpriteDataProviderFactory --> "method" MethodInfo
SpriteDataProviderFactory --> "methodType" Type
SpriteEditorWindow +-- SpriteEditorWindowStyles
SpriteEditorWindowStyles o-> "editingDisableMessageBecausePlaymodeLabel" GUIContent
SpriteEditorWindowStyles o-> "editingDisableMessageBecauseNonEditableLabel" GUIContent
SpriteEditorWindowStyles o-> "revertButtonLabel" GUIContent
SpriteEditorWindowStyles o-> "applyButtonLabel" GUIContent
SpriteEditorWindowStyles o-> "pendingChangesDialogContent" GUIContent
SpriteEditorWindowStyles o-> "applyRevertDialogTitle" GUIContent
SpriteEditorWindowStyles o-> "applyRevertDialogContent" GUIContent
SpriteEditorWindowStyles o-> "noSelectionWarning" GUIContent
SpriteEditorWindowStyles o-> "noModuleWarning" GUIContent
SpriteEditorWindowStyles o-> "applyRevertModuleDialogTitle" GUIContent
SpriteEditorWindowStyles o-> "applyRevertModuleDialogContent" GUIContent
SpriteEditorWindowStyles o-> "revertConfirmationDialogTitle" GUIContent
SpriteEditorWindowStyles o-> "revertConfirmationDialogContent" GUIContent
SpriteEditorWindowStyles o-> "applyConfirmationDialogTitle" GUIContent
SpriteEditorWindowStyles o-> "applyConfirmationDialogContent" GUIContent
SpriteEditorWindowStyles o-> "yesLabel" GUIContent
SpriteEditorWindowStyles o-> "noLabel" GUIContent
SpriteEditorWindow +-- CurrentResetContext
SpriteEditorWindow +-- PreviewTexture2D
Texture2DWrapper <|-- PreviewTexture2D
@enduml
