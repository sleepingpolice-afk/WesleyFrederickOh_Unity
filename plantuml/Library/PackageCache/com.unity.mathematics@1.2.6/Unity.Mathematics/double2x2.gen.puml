@startuml
struct double2x2 {
    + double2x2(c0:double2, c1:double2)
    + double2x2(m00:double, m01:double, m10:double, m11:double)
    + double2x2(v:double)
    + double2x2(v:bool)
    + double2x2(v:bool2x2)
    + double2x2(v:int)
    + double2x2(v:int2x2)
    + double2x2(v:uint)
    + double2x2(v:uint2x2)
    + double2x2(v:float)
    + double2x2(v:float2x2)
    + Equals(rhs:double2x2) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} double2x2(c0:double2, c1:double2) : double2x2
    + {static} double2x2(m00:double, m01:double, m10:double, m11:double) : double2x2
    + {static} double2x2(v:double) : double2x2
    + {static} double2x2(v:bool) : double2x2
    + {static} double2x2(v:bool2x2) : double2x2
    + {static} double2x2(v:int) : double2x2
    + {static} double2x2(v:int2x2) : double2x2
    + {static} double2x2(v:uint) : double2x2
    + {static} double2x2(v:uint2x2) : double2x2
    + {static} double2x2(v:float) : double2x2
    + {static} double2x2(v:float2x2) : double2x2
    + {static} transpose(v:double2x2) : double2x2
    + {static} inverse(m:double2x2) : double2x2
    + {static} determinant(m:double2x2) : double
    + {static} hash(v:double2x2) : uint
    + {static} hashwide(v:double2x2) : uint2
}
class "IEquatable`1"<T> {
}
IFormattable <|-- double2x2
double2x2 --> "c0" double2
double2x2 --> "c1" double2
double2x2 o-> "identity" double2x2
double2x2 --> "zero" double2x2
@enduml
