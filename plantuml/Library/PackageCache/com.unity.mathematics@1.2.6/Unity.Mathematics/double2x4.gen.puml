@startuml
struct double2x4 {
    + double2x4(c0:double2, c1:double2, c2:double2, c3:double2)
    + double2x4(m00:double, m01:double, m02:double, m03:double, m10:double, m11:double, m12:double, m13:double)
    + double2x4(v:double)
    + double2x4(v:bool)
    + double2x4(v:bool2x4)
    + double2x4(v:int)
    + double2x4(v:int2x4)
    + double2x4(v:uint)
    + double2x4(v:uint2x4)
    + double2x4(v:float)
    + double2x4(v:float2x4)
    + Equals(rhs:double2x4) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} double2x4(c0:double2, c1:double2, c2:double2, c3:double2) : double2x4
    + {static} double2x4(m00:double, m01:double, m02:double, m03:double, m10:double, m11:double, m12:double, m13:double) : double2x4
    + {static} double2x4(v:double) : double2x4
    + {static} double2x4(v:bool) : double2x4
    + {static} double2x4(v:bool2x4) : double2x4
    + {static} double2x4(v:int) : double2x4
    + {static} double2x4(v:int2x4) : double2x4
    + {static} double2x4(v:uint) : double2x4
    + {static} double2x4(v:uint2x4) : double2x4
    + {static} double2x4(v:float) : double2x4
    + {static} double2x4(v:float2x4) : double2x4
    + {static} transpose(v:double2x4) : double4x2
    + {static} hash(v:double2x4) : uint
    + {static} hashwide(v:double2x4) : uint2
}
class "IEquatable`1"<T> {
}
IFormattable <|-- double2x4
double2x4 --> "c0" double2
double2x4 --> "c1" double2
double2x4 --> "c2" double2
double2x4 --> "c3" double2
double2x4 --> "zero" double2x4
@enduml
