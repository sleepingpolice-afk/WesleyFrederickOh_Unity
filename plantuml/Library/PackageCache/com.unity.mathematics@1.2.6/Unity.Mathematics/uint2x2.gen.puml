@startuml
struct uint2x2 {
    + uint2x2(c0:uint2, c1:uint2)
    + uint2x2(m00:uint, m01:uint, m10:uint, m11:uint)
    + uint2x2(v:uint)
    + uint2x2(v:bool)
    + uint2x2(v:bool2x2)
    + uint2x2(v:int)
    + uint2x2(v:int2x2)
    + uint2x2(v:float)
    + uint2x2(v:float2x2)
    + uint2x2(v:double)
    + uint2x2(v:double2x2)
    + Equals(rhs:uint2x2) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} uint2x2(c0:uint2, c1:uint2) : uint2x2
    + {static} uint2x2(m00:uint, m01:uint, m10:uint, m11:uint) : uint2x2
    + {static} uint2x2(v:uint) : uint2x2
    + {static} uint2x2(v:bool) : uint2x2
    + {static} uint2x2(v:bool2x2) : uint2x2
    + {static} uint2x2(v:int) : uint2x2
    + {static} uint2x2(v:int2x2) : uint2x2
    + {static} uint2x2(v:float) : uint2x2
    + {static} uint2x2(v:float2x2) : uint2x2
    + {static} uint2x2(v:double) : uint2x2
    + {static} uint2x2(v:double2x2) : uint2x2
    + {static} transpose(v:uint2x2) : uint2x2
    + {static} hash(v:uint2x2) : uint
    + {static} hashwide(v:uint2x2) : uint2
}
class "IEquatable`1"<T> {
}
IFormattable <|-- uint2x2
uint2x2 --> "c0" uint2
uint2x2 --> "c1" uint2
uint2x2 o-> "identity" uint2x2
uint2x2 --> "zero" uint2x2
@enduml
