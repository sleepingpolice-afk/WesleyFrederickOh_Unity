@startuml
struct int2x3 {
    + int2x3(c0:int2, c1:int2, c2:int2)
    + int2x3(m00:int, m01:int, m02:int, m10:int, m11:int, m12:int)
    + int2x3(v:int)
    + int2x3(v:bool)
    + int2x3(v:bool2x3)
    + int2x3(v:uint)
    + int2x3(v:uint2x3)
    + int2x3(v:float)
    + int2x3(v:float2x3)
    + int2x3(v:double)
    + int2x3(v:double2x3)
    + Equals(rhs:int2x3) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} int2x3(c0:int2, c1:int2, c2:int2) : int2x3
    + {static} int2x3(m00:int, m01:int, m02:int, m10:int, m11:int, m12:int) : int2x3
    + {static} int2x3(v:int) : int2x3
    + {static} int2x3(v:bool) : int2x3
    + {static} int2x3(v:bool2x3) : int2x3
    + {static} int2x3(v:uint) : int2x3
    + {static} int2x3(v:uint2x3) : int2x3
    + {static} int2x3(v:float) : int2x3
    + {static} int2x3(v:float2x3) : int2x3
    + {static} int2x3(v:double) : int2x3
    + {static} int2x3(v:double2x3) : int2x3
    + {static} transpose(v:int2x3) : int3x2
    + {static} hash(v:int2x3) : uint
    + {static} hashwide(v:int2x3) : uint2
}
class "IEquatable`1"<T> {
}
IFormattable <|-- int2x3
int2x3 --> "c0" int2
int2x3 --> "c1" int2
int2x3 --> "c2" int2
int2x3 --> "zero" int2x3
@enduml
