@startuml
struct double4x3 {
    + double4x3(c0:double4, c1:double4, c2:double4)
    + double4x3(m00:double, m01:double, m02:double, m10:double, m11:double, m12:double, m20:double, m21:double, m22:double, m30:double, m31:double, m32:double)
    + double4x3(v:double)
    + double4x3(v:bool)
    + double4x3(v:bool4x3)
    + double4x3(v:int)
    + double4x3(v:int4x3)
    + double4x3(v:uint)
    + double4x3(v:uint4x3)
    + double4x3(v:float)
    + double4x3(v:float4x3)
    + Equals(rhs:double4x3) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} double4x3(c0:double4, c1:double4, c2:double4) : double4x3
    + {static} double4x3(m00:double, m01:double, m02:double, m10:double, m11:double, m12:double, m20:double, m21:double, m22:double, m30:double, m31:double, m32:double) : double4x3
    + {static} double4x3(v:double) : double4x3
    + {static} double4x3(v:bool) : double4x3
    + {static} double4x3(v:bool4x3) : double4x3
    + {static} double4x3(v:int) : double4x3
    + {static} double4x3(v:int4x3) : double4x3
    + {static} double4x3(v:uint) : double4x3
    + {static} double4x3(v:uint4x3) : double4x3
    + {static} double4x3(v:float) : double4x3
    + {static} double4x3(v:float4x3) : double4x3
    + {static} transpose(v:double4x3) : double3x4
    + {static} hash(v:double4x3) : uint
    + {static} hashwide(v:double4x3) : uint4
}
class "IEquatable`1"<T> {
}
IFormattable <|-- double4x3
double4x3 --> "c0" double4
double4x3 --> "c1" double4
double4x3 --> "c2" double4
double4x3 --> "zero" double4x3
@enduml
