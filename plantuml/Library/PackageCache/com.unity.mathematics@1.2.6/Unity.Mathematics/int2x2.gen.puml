@startuml
struct int2x2 {
    + int2x2(c0:int2, c1:int2)
    + int2x2(m00:int, m01:int, m10:int, m11:int)
    + int2x2(v:int)
    + int2x2(v:bool)
    + int2x2(v:bool2x2)
    + int2x2(v:uint)
    + int2x2(v:uint2x2)
    + int2x2(v:float)
    + int2x2(v:float2x2)
    + int2x2(v:double)
    + int2x2(v:double2x2)
    + Equals(rhs:int2x2) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} int2x2(c0:int2, c1:int2) : int2x2
    + {static} int2x2(m00:int, m01:int, m10:int, m11:int) : int2x2
    + {static} int2x2(v:int) : int2x2
    + {static} int2x2(v:bool) : int2x2
    + {static} int2x2(v:bool2x2) : int2x2
    + {static} int2x2(v:uint) : int2x2
    + {static} int2x2(v:uint2x2) : int2x2
    + {static} int2x2(v:float) : int2x2
    + {static} int2x2(v:float2x2) : int2x2
    + {static} int2x2(v:double) : int2x2
    + {static} int2x2(v:double2x2) : int2x2
    + {static} transpose(v:int2x2) : int2x2
    + {static} determinant(m:int2x2) : int
    + {static} hash(v:int2x2) : uint
    + {static} hashwide(v:int2x2) : uint2
}
class "IEquatable`1"<T> {
}
IFormattable <|-- int2x2
int2x2 --> "c0" int2
int2x2 --> "c1" int2
int2x2 o-> "identity" int2x2
int2x2 --> "zero" int2x2
@enduml
