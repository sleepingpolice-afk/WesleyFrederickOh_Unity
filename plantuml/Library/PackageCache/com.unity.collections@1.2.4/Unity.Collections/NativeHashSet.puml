@startuml
struct "NativeHashSet`1"<T> {
    + NativeHashSet(capacity:int, allocator:AllocatorManager.AllocatorHandle)
    + IsEmpty : bool <<get>>
    + Count() : int
    + Capacity : int <<get>> <<set>>
    + IsCreated : bool <<get>>
    + Dispose() : void
    + Dispose(inputDeps:JobHandle) : JobHandle
    + Clear() : void
    + Add(item:T) : bool
    + Remove(item:T) : bool
    + Contains(item:T) : bool
    + ToNativeArray(allocator:AllocatorManager.AllocatorHandle) : NativeArray<T>
    + AsParallelWriter() : ParallelWriter
    + GetEnumerator() : Enumerator
}
class "NativeHashSetDebuggerTypeProxy`1"<T> <<sealed>> {
    + NativeHashSetDebuggerTypeProxy(data:NativeHashSet<T>)
}
class "IEnumerable`1"<T> {
}
class "IEquatable`1"<T> {
}
struct ParallelWriter {
    + Capacity : int <<get>>
    + Add(item:T) : bool
}
struct Enumerator {
    + Dispose() : void
    + MoveNext() : bool
    + Reset() : void
}
class "List`1"<T> {
}
class "IEnumerator`1"<T> {
}
INativeDisposable <|-- "NativeHashSet`1"
"IEnumerable`1" "<T>" <|-- "NativeHashSet`1"
"NativeHashSetDebuggerTypeProxy`1" --> "Items<T>" "List`1"
"NativeHashSet`1" +-- ParallelWriter
"NativeHashSet`1" +-- Enumerator
"IEnumerator`1" "<T>" <|-- Enumerator
Enumerator --> "Current" T
@enduml
